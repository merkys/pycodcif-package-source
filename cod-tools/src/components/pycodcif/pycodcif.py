# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pycodcif', [dirname(__file__)])
        except ImportError:
            import _pycodcif
            return _pycodcif
        if fp is not None:
            try:
                _mod = imp.load_module('_pycodcif', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pycodcif = swig_import_helper()
    del swig_import_helper
else:
    import _pycodcif
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



import warnings
warnings.filterwarnings('ignore', category=UnicodeWarning)

def parse(filename,*args):
    import re

    if isinstance(filename,unicode):
        filename = filename.encode('utf-8')

    prog = '-'
    try:
        import sys
        prog = sys.argv[0]
    except IndexError:
        pass

    options = {}
    if len(args) > 0:
        options = args[0]

    parse_results = parse_cif(filename,prog,options)
    data = parse_results['datablocks']
    messages = parse_results['messages']
    nerrors = parse_results['nerrors']

    for datablock in data:
        datablock['precisions'] = {}
        for tag in datablock['types'].keys():
            precisions, _ = extract_precision(datablock['values'][tag],
                                              datablock['types'][tag])
            if precisions is not None:
                datablock['precisions'][tag] = precisions
        for saveblock in datablock['save_blocks']:
            saveblock['precisions'] = {}
            for tag in saveblock['types'].keys():
                precisions, _ = extract_precision(saveblock['values'][tag],
                                                  saveblock['types'][tag])
                if precisions is not None:
                    saveblock['precisions'][tag] = precisions

    data = [ decode_utf8_frame( _ ) for _ in data ]

    errors = []
    warnings = []

    for message in messages:
        datablock = message['addpos']
        if datablock is not None:
            datablock = "data_{0}".format(datablock)
        explanation = message['explanation']
        if explanation is not None:
            explanation = explanation[0].lower() + explanation[1:]
        lineno = None
        if 'lineno' in message:
            lineno = message['lineno']
        columnno = None
        if 'columnno' in message:
            columnno = message['columnno']
        msg = sprint_message(message['program'],
                             message['filename'],
                             datablock,
                             message['status'],
                             message['message'],
                             explanation,
                             lineno,
                             columnno,
                             message['line'])

        if message['status'] == 'ERROR':
            errors.append(msg)
        else:
            warnings.append(msg)

    if 'no_print' not in options.keys() or options['no_print'] == 0:
        for warning in warnings:
            sys.stdout.write(warning)
        for error in errors:
            sys.stdout.write(error)
        if errors:
            raise CifParserException(errors.pop())

    return data, nerrors, [warnings + errors]

def unpack_precision(value,precision):
    """
    Adapted from:

    URL: svn://www.crystallography.net/cod-tools/branches/andrius-inline-to-swig/src/lib/perl5/Precision.pm
    Relative URL: ^/branches/andrius-inline-to-swig/src/lib/perl5/Precision.pm
    Repository Root: svn://www.crystallography.net/cod-tools
    Repository UUID: 04be6746-3802-0410-999d-98508da1e98c
    Revision: 3228
    """
    import re
    match = re.search('([-+]?[0-9]*)?(\.)?([0-9]+)?(?:e([+-]?[0-9]+))?',
                      value)

    int_part = 0
    if match.group(1):
        if match.group(1) == '+':
            int_part = 1
        elif match.group(1) == '-':
            int_part = -1
        else:
            int_part = int(match.group(1))
    dec_dot = match.group(2)
    mantissa = match.group(3)
    exponent = 0
    if match.group(4):
        exponent = int(match.group(4))
    if dec_dot and mantissa:
        precision = float(precision) / (10**len(mantissa))
    precision = float(precision) * (10**exponent)
    return precision

def extract_precision(values,types):
    import re
    if isinstance(types,list):
        precisions = []
        important = []
        for i in range(0,len(values)):
            precision, is_important = \
                extract_precision(values[i],types[i])
            precisions.append(precision)
            important.append(is_important)
        if any([x == 1 for x in important]):
            return precisions, 1
        else:
            return None, 0
    elif isinstance(types,dict):
        precisions = {}
        for i in values.keys():
            precision, is_important = \
                extract_precision(values[i],types[i])
            if is_important:
                precisions[i] = precision
        if precisions.keys():
            return precisions, 1
        else:
            return None, 0
    elif types == 'FLOAT':
        match = re.search('^(.*)(\(([0-9]+)\))$',values)
        if match is not None and match.group(1):
            return unpack_precision(match.group(1),match.group(3)), 1
        else:
            return None, 1
    elif types == 'INT':
        match = re.search('^(.*)(\(([0-9]+)\))$',values)
        if match is not None and match.group(1):
            return match.group(3), 1
        else:
            return None, 1
    else:
        return None, 0

def decode_utf8_frame(frame):
    for _ in [ 'name', 'tags', 'loops' ]:
        if _ in frame.keys():
            frame[_] = decode_utf8_values(frame[_])

    for _ in [ 'precisions', 'inloop', 'values', 'types' ]:
        if _ in frame.keys():
            frame[_] = decode_utf8_hash_keys(frame[_])

    if 'values' in frame.keys() and 'types' in frame.keys():
        frame['values'] = decode_utf8_typed_values(frame['values'],
                                                   frame['types'])

    if 'save_blocks' in frame.keys():
        frame['save_blocks'] = [ decode_utf8_frame(_) for _ in
                                        frame['save_blocks'] ]

    return frame

def decode_utf8_hash_keys(values):
    if isinstance(values,list):
        for i in range(0,len(values)):
            values[i] = decode_utf8_hash_keys(values[i])
    elif isinstance(values,dict):
        for key in values.keys():
            values[key] = decode_utf8_hash_keys(values[key])
            new_key = decode_utf8_values(key)
            if new_key != key:
                values[new_key] = values[key]
                del values[key]

    return values

def decode_utf8_values(values):
    if isinstance(values,list):
        for i in range(0,len(values)):
            values[i] = decode_utf8_values(values[i])
    elif isinstance(values,dict):
        for key in values.keys():
            values[key] = decode_utf8_hash_keys(values[key])
    else:
        values = values.decode('utf-8','replace')

    return values

def decode_utf8_typed_values(values,types):
    if isinstance(values,list):
        for i in range(0,len(values)):
            values[i] = decode_utf8_typed_values(values[i], types[i])
    elif isinstance(values,dict):
        for key in values.keys():
            values[key] = decode_utf8_typed_values(values[key], types[key])
    elif types not in [ 'INT', 'FLOAT' ]:
        values = decode_utf8_values(values)

    return values

program_escape = {
    '&': '&amp;',
    ':': '&colon;',
}
filename_escape = {
    '&': '&amp;',
    ':': '&colon;',
    ' ': '&nbsp;',
    '(': '&lpar;',
    ')': '&rpar;',
}
datablock_escape = {
    '&': '&amp;',
    ':': '&colon;',
    ' ': '&nbsp;',
}
message_escape = {
    '&': '&amp;',
    ':': '&colon;'
}

def sprint_message(program, filename, datablock, errlevel, message,
                   explanation, line, column, line_contents):
    """
    Adapted from:
    URL: svn://www.crystallography.net/cod-tools/trunk/src/lib/perl5/COD/UserMessage.pm
    Relative URL: ^/trunk/src/lib/perl5/COD/UserMessage.pm
    Repository Root: svn://www.crystallography.net/cod-tools
    Repository UUID: 04be6746-3802-0410-999d-98508da1e98c
    Revision: 3813
    """
    import re
    message = re.sub('\.?\n?$', '', message)
    if explanation is not None:
        explanation = re.sub('\.?\n?$', '', explanation)
    if line_contents is not None:
        line_contents = re.sub('\n+$', '', line_contents)

    if program == '-c':
        program = "python -c '...'"

    program     = escape_meta(program,     program_escape)
    filename    = escape_meta(filename,    filename_escape)
    datablock   = escape_meta(datablock,   datablock_escape)
    message     = escape_meta(message,     message_escape)
    explanation = escape_meta(explanation, message_escape)

    if line_contents is not None:
        line_contents = '\n'.join([ " {0}".format(x) for x in line_contents.split('\n') ])

    msg = "{0}: ".format(program)
    if filename is not None:
        msg = "{0}{1}".format(msg, filename)
        if line is not None:
            msg = "{0}({1}".format(msg, line)
            if column is not None:
                msg = "{0},{1}".format(msg, column)
            msg = "{0})".format(msg)
        if datablock is not None:
            msg = "{0} {1}".format(msg, datablock)
        msg = "{0}: ".format(msg)
    if errlevel is not None:
        msg = "{0}{1}, ".format(msg, errlevel)
    msg = "{0}{1}".format(msg, message)
    if explanation is not None:
        msg = "{0} -- {1}".format(msg, explanation)
    if line_contents is not None:
        msg = "{0}:\n{1}\n".format(msg, line_contents)
        if column is not None:
            msg = "{0} {1}^\n".format(msg, " "*(column-1))
    else:
        msg = "{0}.\n".format(msg)

    return msg

def escape_meta(text, escaped_symbols):
    """
    Adapted from:
    URL: svn://www.crystallography.net/cod-tools/trunk/src/lib/perl5/COD/UserMessage.pm
    Relative URL: ^/trunk/src/lib/perl5/COD/UserMessage.pm
    Repository Root: svn://www.crystallography.net/cod-tools
    Repository UUID: 04be6746-3802-0410-999d-98508da1e98c
    Revision: 3813
    """
    import re

    if text is None:
        return None

    symbols = "|".join(["\\{0}".format(x) for x in escaped_symbols.keys()])

    def escape_internal(matchobj):
        return escaped_symbols[matchobj.group(0)]

    return re.sub("({0})".format(symbols), escape_internal, text)

class CifParserException(Exception):
    pass

class CifFile(object):
    def __init__(self, file = None, parser_options = {}):
        if file is None:
# Create an empty CifFile object
            self._cif = new_cif( None )
        else:
# Parse CIF file
            self._cif = new_cif_from_cif_file( file, parser_options, None )

    def __getitem__(self, key):
        datablock = cif_datablock_list( self._cif )
        if isinstance(key, int):
            for i in range(0,key):
                if datablock is None:
                    raise IndexError('list index out of range')
                datablock = datablock_next( datablock )
            if datablock is None:
                raise IndexError('list index out of range')
            return CifDatablock(datablock = datablock)
        else:
            while datablock_name( datablock ) != key:
                datablock = datablock_next( datablock )
                if datablock is None:
                    raise KeyError(key)
            return CifDatablock(datablock = datablock)

    def __str__(self):
        buffer = new_buffer( None )
        cif_sprint( buffer, self._cif )
        return buffer_string( buffer )

    def append(self, datablock):
# must be a datablock!
        cif_append_datablock( self._cif, datablock._datablock )

class CifDatablock(object):
    def __init__(self, name = None, datablock = None):
        if datablock is None:
            self._datablock = new_datablock( name, None, None )
        else:
            self._datablock = datablock

    def __getitem__(self, key):
        tag_index = datablock_tag_index( self._datablock, key )
        if tag_index == -1:
            raise KeyError(key)
        values = []
        for i in range(0, datablock_value_length( self._datablock,
                                                  tag_index )):
            values.append( extract_value( datablock_cifvalue( self._datablock,
                                                              tag_index, i ) ) )
        return values

    def __setitem__(self, key, value):
        if not isinstance(value, list):
            value = [ value ]
        tag_index = datablock_tag_index( self._datablock, key )
        if tag_index == -1:
            if len(value) == 1:
                datablock_insert_cifvalue( self._datablock, key, value[0], None )
            else:
                self.add_loop( [ key ], [ [x] for x in value ] )
        elif len(value) > 1:
            raise ValueError( "can not overwrite data item with a loop" )
        elif datablock_tag_in_loop( self._datablock, tag_index ) != -1:
            raise ValueError( "can not overwrite a loop" )
        else:
            datablock_overwrite_cifvalue( self._datablock, tag_index, 0, value[0], None )

    def __delitem__(self, key):
        tag_index = datablock_tag_index( self._datablock, key )
        if tag_index != -1:
            datablock_delete_tag( self._datablock, tag_index )

    def keys(self):
        length = datablock_length( self._datablock )
        return [ datablock_tag( self._datablock, x) for x in range(0, length) ]

    def add_loop(self, keys, values):
        for key in keys:
            if key in self.keys():
                raise KeyError( "data item '{}' already exists".format(key) )
        datablock_start_loop( self._datablock )
        for i in range(0,len(values)):
            for j, key in enumerate(keys):
                if i == 0:
                    datablock_insert_cifvalue( self._datablock, key,
                                               values[i][j], None )
                else:
                    datablock_push_loop_cifvalue( self._datablock,
                                                  values[i][j], None )
        datablock_finish_loop( self._datablock, None )



def parse_cif(fname, prog, options):
    return _pycodcif.parse_cif(fname, prog, options)
parse_cif = _pycodcif.parse_cif

def cif_option_default():
    return _pycodcif.cif_option_default()
cif_option_default = _pycodcif.cif_option_default

def new_buffer(ex):
    return _pycodcif.new_buffer(ex)
new_buffer = _pycodcif.new_buffer

def bprint(buffer, string, ex):
    return _pycodcif.bprint(buffer, string, ex)
bprint = _pycodcif.bprint

def buffer_string(buffer):
    return _pycodcif.buffer_string(buffer)
buffer_string = _pycodcif.buffer_string

def new_value_from_scalar(s, type, ex):
    return _pycodcif.new_value_from_scalar(s, type, ex)
new_value_from_scalar = _pycodcif.new_value_from_scalar

def value_dump(value):
    return _pycodcif.value_dump(value)
value_dump = _pycodcif.value_dump

def new_datablock(name, next, ex):
    return _pycodcif.new_datablock(name, next, ex)
new_datablock = _pycodcif.new_datablock

def datablock_next(datablock):
    return _pycodcif.datablock_next(datablock)
datablock_next = _pycodcif.datablock_next

def datablock_length(datablock):
    return _pycodcif.datablock_length(datablock)
datablock_length = _pycodcif.datablock_length

def datablock_value_lengths(datablock):
    return _pycodcif.datablock_value_lengths(datablock)
datablock_value_lengths = _pycodcif.datablock_value_lengths

def datablock_cifvalue(datablock, tag_nr, val_nr):
    return _pycodcif.datablock_cifvalue(datablock, tag_nr, val_nr)
datablock_cifvalue = _pycodcif.datablock_cifvalue

def datablock_tag_index(datablock, tag):
    return _pycodcif.datablock_tag_index(datablock, tag)
datablock_tag_index = _pycodcif.datablock_tag_index

def datablock_overwrite_cifvalue(datablock, tag_nr, val_nr, value, ex):
    return _pycodcif.datablock_overwrite_cifvalue(datablock, tag_nr, val_nr, value, ex)
datablock_overwrite_cifvalue = _pycodcif.datablock_overwrite_cifvalue

def datablock_delete_tag(datablock, tag_nr):
    return _pycodcif.datablock_delete_tag(datablock, tag_nr)
datablock_delete_tag = _pycodcif.datablock_delete_tag

def datablock_insert_cifvalue(datablock, tag, value, ex):
    return _pycodcif.datablock_insert_cifvalue(datablock, tag, value, ex)
datablock_insert_cifvalue = _pycodcif.datablock_insert_cifvalue

def datablock_start_loop(datablock):
    return _pycodcif.datablock_start_loop(datablock)
datablock_start_loop = _pycodcif.datablock_start_loop

def datablock_finish_loop(datablock, ex):
    return _pycodcif.datablock_finish_loop(datablock, ex)
datablock_finish_loop = _pycodcif.datablock_finish_loop

def datablock_push_loop_cifvalue(datablock, value, ex):
    return _pycodcif.datablock_push_loop_cifvalue(datablock, value, ex)
datablock_push_loop_cifvalue = _pycodcif.datablock_push_loop_cifvalue

def datablock_name(datablock):
    return _pycodcif.datablock_name(datablock)
datablock_name = _pycodcif.datablock_name

def new_cif(ex):
    return _pycodcif.new_cif(ex)
new_cif = _pycodcif.new_cif

def cif_start_datablock(cif, name, ex):
    return _pycodcif.cif_start_datablock(cif, name, ex)
cif_start_datablock = _pycodcif.cif_start_datablock

def cif_append_datablock(cif, datablock):
    return _pycodcif.cif_append_datablock(cif, datablock)
cif_append_datablock = _pycodcif.cif_append_datablock

def cif_sprint(buffer, cif):
    return _pycodcif.cif_sprint(buffer, cif)
cif_sprint = _pycodcif.cif_sprint

def cif_datablock_list(cif):
    return _pycodcif.cif_datablock_list(cif)
cif_datablock_list = _pycodcif.cif_datablock_list

def new_cif_from_cif_file(filename, co, ex):
    return _pycodcif.new_cif_from_cif_file(filename, co, ex)
new_cif_from_cif_file = _pycodcif.new_cif_from_cif_file

def extract_value(cifvalue):
    return _pycodcif.extract_value(cifvalue)
extract_value = _pycodcif.extract_value

def extract_parser_options(options):
    return _pycodcif.extract_parser_options(options)
extract_parser_options = _pycodcif.extract_parser_options

def datablock_value_length(datablock, tag_index):
    return _pycodcif.datablock_value_length(datablock, tag_index)
datablock_value_length = _pycodcif.datablock_value_length

def datablock_tag(datablock, tag_index):
    return _pycodcif.datablock_tag(datablock, tag_index)
datablock_tag = _pycodcif.datablock_tag

def datablock_tag_in_loop(datablock, tag_index):
    return _pycodcif.datablock_tag_in_loop(datablock, tag_index)
datablock_tag_in_loop = _pycodcif.datablock_tag_in_loop
# This file is compatible with both classic and new-style classes.


